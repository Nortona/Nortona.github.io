<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>折花入酒blog</title>
  
  
  <link href="https://nortona.github.io/atom.xml" rel="self"/>
  
  <link href="https://nortona.github.io/"/>
  <updated>2022-03-23T13:16:00.025Z</updated>
  <id>https://nortona.github.io/</id>
  
  <author>
    <name>折花入酒</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【环境配置】：mmdetection安装</title>
    <link href="https://nortona.github.io/2022/03/23/%E3%80%90%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E3%80%91%EF%BC%9Ammdetection%E5%AE%89%E8%A3%85/"/>
    <id>https://nortona.github.io/2022/03/23/%E3%80%90%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E3%80%91%EF%BC%9Ammdetection%E5%AE%89%E8%A3%85/</id>
    <published>2022-03-23T12:58:09.000Z</published>
    <updated>2022-03-23T13:16:00.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MMdetection安装"><a href="#MMdetection安装" class="headerlink" title="MMdetection安装"></a>MMdetection安装</h2><p><a href="https://mmdetection.readthedocs.io/zh_CN/latest/">https://mmdetection.readthedocs.io/zh_CN/latest/</a></p><p><a href="https://github.com/open-mmlab/mmdetection">https://github.com/open-mmlab/mmdetection</a></p><h3 id="1、创建虚拟环境"><a href="#1、创建虚拟环境" class="headerlink" title="1、创建虚拟环境"></a>1、创建虚拟环境</h3><img src="/" class="lazyload" data-src="/2022/03/23/%E3%80%90%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E3%80%91%EF%BC%9Ammdetection%E5%AE%89%E8%A3%85/1648037086737.png"  class width="1648037086737"><h3 id="2、激活虚拟环境"><a href="#2、激活虚拟环境" class="headerlink" title="2、激活虚拟环境"></a>2、激活虚拟环境</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda activate open-mmlab</span><br></pre></td></tr></table></figure><img src="/" class="lazyload" data-src="/2022/03/23/%E3%80%90%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E3%80%91%EF%BC%9Ammdetection%E5%AE%89%E8%A3%85/1647420071957.png"  class width="1647420071957"><h3 id="3、安装cython"><a href="#3、安装cython" class="headerlink" title="3、安装cython"></a>3、安装cython</h3><img src="/" class="lazyload" data-src="/2022/03/23/%E3%80%90%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E3%80%91%EF%BC%9Ammdetection%E5%AE%89%E8%A3%85/1648037189310.png"  class width="1648037189310"><h3 id="4、基于Pytorch官网安装-PyTorch-和-torchvision"><a href="#4、基于Pytorch官网安装-PyTorch-和-torchvision" class="headerlink" title="4、基于Pytorch官网安装 PyTorch 和 torchvision"></a>4、基于Pytorch官网安装 PyTorch 和 torchvision</h3><img src="/" class="lazyload" data-src="/2022/03/23/%E3%80%90%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E3%80%91%EF%BC%9Ammdetection%E5%AE%89%E8%A3%85/1648037297582.png"  class width="1648037297582"><h3 id="5、根据cuda与torch版本安装mmcv"><a href="#5、根据cuda与torch版本安装mmcv" class="headerlink" title="5、根据cuda与torch版本安装mmcv"></a>5、根据cuda与torch版本安装mmcv</h3><img src="/" class="lazyload" data-src="/2022/03/23/%E3%80%90%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E3%80%91%EF%BC%9Ammdetection%E5%AE%89%E8%A3%85/1648037435991.png"  class width="1648037435991"><h3 id="6、安装mmdet"><a href="#6、安装mmdet" class="headerlink" title="6、安装mmdet"></a>6、安装mmdet</h3><img src="/" class="lazyload" data-src="/2022/03/23/%E3%80%90%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E3%80%91%EF%BC%9Ammdetection%E5%AE%89%E8%A3%85/1648037478497.png"  class width="1648037478497"><h3 id="7、各包版本"><a href="#7、各包版本" class="headerlink" title="7、各包版本"></a>7、各包版本</h3><img src="/" class="lazyload" data-src="/2022/03/23/%E3%80%90%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E3%80%91%EF%BC%9Ammdetection%E5%AE%89%E8%A3%85/1648037559601.png"  class width="1648037559601"><h3 id="8、测试"><a href="#8、测试" class="headerlink" title="8、测试"></a>8、测试</h3><p>在demo文件夹下新建test.py文件</p><img src="/" class="lazyload" data-src="/2022/03/23/%E3%80%90%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E3%80%91%EF%BC%9Ammdetection%E5%AE%89%E8%A3%85/1648037661455.png"  class width="1648037661455"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mmdet.apis <span class="keyword">import</span> init_detector, inference_detector</span><br><span class="line"></span><br><span class="line">config_file = <span class="string">&#x27;../configs/faster_rcnn/faster_rcnn_r50_fpn_1x_coco.py&#x27;</span></span><br><span class="line"><span class="comment"># 从 model zoo 下载 checkpoint 并放在 `checkpoints/` 文件下</span></span><br><span class="line"><span class="comment"># 网址为: http://download.openmmlab.com/mmdetection/v2.0/faster_rcnn/faster_rcnn_r50_fpn_1x_coco/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth</span></span><br><span class="line">checkpoint_file = <span class="string">&#x27;../checkpoints/faster_rcnn_r50_fpn_1x_coco_20200130-047c8118.pth&#x27;</span></span><br><span class="line">device = <span class="string">&#x27;cuda:0&#x27;</span></span><br><span class="line"><span class="comment"># 初始化检测器</span></span><br><span class="line">model = init_detector(config_file, checkpoint_file, device=device)</span><br><span class="line"><span class="comment"># 推理演示图像</span></span><br><span class="line">inference_detector(model, <span class="string">&#x27;demo.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure><p>出现报错</p><img src="/" class="lazyload" data-src="/2022/03/23/%E3%80%90%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E3%80%91%EF%BC%9Ammdetection%E5%AE%89%E8%A3%85/1648037734660.png"  class width="1648037734660"><p>打开configs/base/models</p><p>打开faster_rcnn_r50_fpn.py</p><img src="/" class="lazyload" data-src="/2022/03/23/%E3%80%90%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E3%80%91%EF%BC%9Ammdetection%E5%AE%89%E8%A3%85/1648037857205.png"  class width="1648037857205"><img src="/" class="lazyload" data-src="/2022/03/23/%E3%80%90%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E3%80%91%EF%BC%9Ammdetection%E5%AE%89%E8%A3%85/1648037874321.png"  class width="1648037874321"><p>如上修改后运行成功</p><img src="/" class="lazyload" data-src="/2022/03/23/%E3%80%90%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E3%80%91%EF%BC%9Ammdetection%E5%AE%89%E8%A3%85/1648041357613.png"  class width="1648041357613">]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;MMdetection安装&quot;&gt;&lt;a href=&quot;#MMdetection安装&quot; class=&quot;headerlink&quot; title=&quot;MMdetection安装&quot;&gt;&lt;/a&gt;MMdetection安装&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://mmdetecti</summary>
      
    
    
    
    <category term="环境配置" scheme="https://nortona.github.io/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="环境配置" scheme="https://nortona.github.io/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    <category term="目标检测" scheme="https://nortona.github.io/tags/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B/"/>
    
    <category term="mmdetection" scheme="https://nortona.github.io/tags/mmdetection/"/>
    
  </entry>
  
  <entry>
    <title>【数据处理】：（二）文本类</title>
    <link href="https://nortona.github.io/2022/03/16/%E3%80%90%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E3%80%91%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89%E6%96%87%E6%9C%AC%E7%B1%BB/"/>
    <id>https://nortona.github.io/2022/03/16/%E3%80%90%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E3%80%91%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89%E6%96%87%E6%9C%AC%E7%B1%BB/</id>
    <published>2022-03-16T13:52:20.000Z</published>
    <updated>2022-03-17T04:34:02.093Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、读取arff文件"><a href="#一、读取arff文件" class="headerlink" title="一、读取arff文件"></a>一、读取arff文件</h2><h3 id="1、使用scipy-io中arff读取文件"><a href="#1、使用scipy-io中arff读取文件" class="headerlink" title="1、使用scipy.io中arff读取文件"></a>1、使用scipy.io中arff读取文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> scipy.io <span class="keyword">import</span> arff</span><br><span class="line"></span><br><span class="line">data,meta = arff.loadarff(<span class="string">&quot;../Dry_Bean_Dataset/Dry_Bean_Dataset.arff&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2、转化为DataFrame"><a href="#2、转化为DataFrame" class="headerlink" title="2、转化为DataFrame"></a>2、转化为DataFrame</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">df =pd.DataFrame(data)</span><br><span class="line"><span class="built_in">print</span>(df.shape)</span><br><span class="line"><span class="built_in">print</span>(df.head())</span><br><span class="line"><span class="built_in">print</span>(df.isnull().<span class="built_in">sum</span>())</span><br><span class="line"><span class="built_in">print</span>(df.describe().T)</span><br><span class="line"><span class="built_in">print</span>(df.Class.unique())</span><br></pre></td></tr></table></figure><h3 id="3、使用LabelEncoder对类别Class进行编码"><a href="#3、使用LabelEncoder对类别Class进行编码" class="headerlink" title="3、使用LabelEncoder对类别Class进行编码"></a>3、使用LabelEncoder对类别Class进行编码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span>  LabelEncoder</span><br><span class="line">lb_encoder = LabelEncoder()</span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> df.columns:</span><br><span class="line">    df.Class = lb_encoder.fit_transform(df.Class)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.Class.value_counts())</span><br></pre></td></tr></table></figure><h3 id="4、使用sns与plt绘制不同类别的数量"><a href="#4、使用sns与plt绘制不同类别的数量" class="headerlink" title="4、使用sns与plt绘制不同类别的数量"></a>4、使用sns与plt绘制不同类别的数量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">sns.countplot(x=df.Class)</span><br><span class="line">plt.title(<span class="string">&#x27;Class&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><h2 id="二、针对空值填补"><a href="#二、针对空值填补" class="headerlink" title="二、针对空值填补"></a>二、针对空值填补</h2><h3 id="1、查找空值"><a href="#1、查找空值" class="headerlink" title="1、查找空值"></a>1、查找空值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DataDF.isnull().<span class="built_in">sum</span>().sort_values(ascending=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h3 id="2、删除有缺失值的行或者列"><a href="#2、删除有缺失值的行或者列" class="headerlink" title="2、删除有缺失值的行或者列"></a>2、删除有缺失值的行或者列</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;移除行或列&quot;&#x27;&#x27;&#x27;</span></span><br><span class="line">drop_row_data = train_data.dropna()   <span class="comment"># 移除缺值的行</span></span><br><span class="line">drop_col_data = train_data.dropna(axis=<span class="number">1</span>)  <span class="comment"># 移除至少缺一个值的列</span></span><br></pre></td></tr></table></figure><h3 id="3、常规填补法"><a href="#3、常规填补法" class="headerlink" title="3、常规填补法"></a>3、常规填补法</h3><p>均值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">all_features.Embarked = all_features.Embarked.fillna(all_features.Embarked.mean())</span><br></pre></td></tr></table></figure><p>最近邻,前后，在时间序列分析中比较常见</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(DataDF.UnitPrice.fillna(method=<span class="string">&#x27;ffill&#x27;</span>)) <span class="comment"># 前向后填充</span></span><br><span class="line"><span class="built_in">print</span>(DataDF.UnitPrice.fillna(method=<span class="string">&#x27;bfill&#x27;</span>)) <span class="comment"># 后向前填充</span></span><br></pre></td></tr></table></figure><h3 id="4、使用与之相关的属性，相近的求均值填补"><a href="#4、使用与之相关的属性，相近的求均值填补" class="headerlink" title="4、使用与之相关的属性，相近的求均值填补"></a>4、使用与之相关的属性，相近的求均值填补</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sns.boxplot(x = train_data[<span class="string">&quot;Pclass&quot;</span>], y = train_data[<span class="string">&quot;Age&quot;</span>])plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/" class="lazyload" data-src="/2022/03/16/%E3%80%90%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E3%80%91%EF%BC%9A%EF%BC%88%E4%BA%8C%EF%BC%89%E6%96%87%E6%9C%AC%E7%B1%BB/1647438088486.png"  class width="1647438088486"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">通过数据可视化，发现Age与Pclass相关性较大</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_age</span>(<span class="params">cols</span>):</span><br><span class="line">    Age=cols[<span class="number">0</span>]</span><br><span class="line">    Pclass=cols[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> pd.isnull(Age):</span><br><span class="line">        <span class="keyword">if</span> Pclass==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> train_data[train_data[<span class="string">&#x27;Pclass&#x27;</span>]==<span class="number">1</span>][<span class="string">&#x27;Age&#x27;</span>].mean()</span><br><span class="line">        <span class="keyword">elif</span> Pclass==<span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> train_data[train_data[<span class="string">&#x27;Pclass&#x27;</span>]==<span class="number">2</span>][<span class="string">&#x27;Age&#x27;</span>].mean()</span><br><span class="line">        <span class="keyword">elif</span> Pclass==<span class="number">3</span>:</span><br><span class="line">            <span class="keyword">return</span> train_data[train_data[<span class="string">&#x27;Pclass&#x27;</span>]==<span class="number">3</span>][<span class="string">&#x27;Age&#x27;</span>].mean()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> Age</span><br><span class="line">train_data[<span class="string">&#x27;Age&#x27;</span>]=train_data[[<span class="string">&#x27;Age&#x27;</span>,<span class="string">&#x27;Pclass&#x27;</span>]].apply(add_age,axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5、具体分析"><a href="#5、具体分析" class="headerlink" title="5、具体分析"></a>5、具体分析</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df_data[<span class="string">&#x27;Title&#x27;</span>] = df_data.Name.<span class="built_in">str</span>.extract(<span class="string">&#x27; ([A-Za-z]+)\.&#x27;</span>, expand=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">pd.crosstab(df_data[<span class="string">&#x27;Title&#x27;</span>], df_data[<span class="string">&#x27;Sex&#x27;</span>]).transpose()</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><thead><tr><th>Title</th><th>Capt</th><th>Col</th><th>Countess</th><th>Don</th><th>Dona</th><th>Dr</th><th>Jonkheer</th><th>Lady</th><th>Major</th><th>Master</th><th>Miss</th><th>Mlle</th><th>Mme</th><th>Mr</th><th>Mrs</th><th>Ms</th><th>Rev</th><th>Sir</th></tr></thead><tbody><tr><td>Sex</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>female</td><td>0</td><td>0</td><td>1</td><td>0</td><td>1</td><td>1</td><td>0</td><td>1</td><td>0</td><td>0</td><td>260</td><td>2</td><td>1</td><td>0</td><td>187</td><td>2</td><td>0</td><td>0</td></tr><tr><td>male</td><td>1</td><td>4</td><td>0</td><td>1</td><td>0</td><td>7</td><td>1</td><td>0</td><td>2</td><td>61</td><td>0</td><td>0</td><td>0</td><td>757</td><td>0</td><td>0</td><td>8</td><td>1</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">根据统计结果填补Age</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">train_data[<span class="string">&#x27;Initial&#x27;</span>]=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> train_data:</span><br><span class="line">    train_data[<span class="string">&#x27;Initial&#x27;</span>]=train_data.Name.<span class="built_in">str</span>.extract(<span class="string">&#x27;([A-Za-z]+)\.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pd.crosstab(train_data.Initial,train_data.Sex).T.style.background_gradient()</span><br><span class="line">train_data[<span class="string">&#x27;Initial&#x27;</span>].replace([<span class="string">&#x27;Mlle&#x27;</span>,<span class="string">&#x27;Mme&#x27;</span>,<span class="string">&#x27;Ms&#x27;</span>,<span class="string">&#x27;Dr&#x27;</span>,<span class="string">&#x27;Major&#x27;</span>,<span class="string">&#x27;Lady&#x27;</span>,<span class="string">&#x27;Countess&#x27;</span>,<span class="string">&#x27;Jonkheer&#x27;</span>,<span class="string">&#x27;Col&#x27;</span>,<span class="string">&#x27;Rev&#x27;</span>,<span class="string">&#x27;Capt&#x27;</span>,<span class="string">&#x27;Sir&#x27;</span>,<span class="string">&#x27;Don&#x27;</span>],[<span class="string">&#x27;Miss&#x27;</span>,<span class="string">&#x27;Miss&#x27;</span>,<span class="string">&#x27;Miss&#x27;</span>,<span class="string">&#x27;Mr&#x27;</span>,<span class="string">&#x27;Mr&#x27;</span>,<span class="string">&#x27;Mrs&#x27;</span>,<span class="string">&#x27;Mrs&#x27;</span>,<span class="string">&#x27;Other&#x27;</span>,<span class="string">&#x27;Other&#x27;</span>,<span class="string">&#x27;Other&#x27;</span>,<span class="string">&#x27;Mr&#x27;</span>,<span class="string">&#x27;Mr&#x27;</span>,<span class="string">&#x27;Mr&#x27;</span>],inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">train_data.loc[(train_data.Age.isnull())&amp;(train_data.Initial==<span class="string">&#x27;Mr&#x27;</span>),<span class="string">&#x27;Age&#x27;</span>]=<span class="number">33</span></span><br><span class="line">train_data.loc[(train_data.Age.isnull())&amp;(train_data.Initial==<span class="string">&#x27;Mrs&#x27;</span>),<span class="string">&#x27;Age&#x27;</span>]=<span class="number">36</span></span><br><span class="line">train_data.loc[(train_data.Age.isnull())&amp;(train_data.Initial==<span class="string">&#x27;Master&#x27;</span>),<span class="string">&#x27;Age&#x27;</span>]=<span class="number">5</span></span><br><span class="line">train_data.loc[(train_data.Age.isnull())&amp;(train_data.Initial==<span class="string">&#x27;Miss&#x27;</span>),<span class="string">&#x27;Age&#x27;</span>]=<span class="number">22</span></span><br><span class="line">train_data.loc[(train_data.Age.isnull())&amp;(train_data.Initial==<span class="string">&#x27;Other&#x27;</span>),<span class="string">&#x27;Age&#x27;</span>]=<span class="number">46</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三、文字类转化为数字"><a href="#三、文字类转化为数字" class="headerlink" title="三、文字类转化为数字"></a>三、文字类转化为数字</h2><h3 id="1、使用LabelEncoder对特征进行编码"><a href="#1、使用LabelEncoder对特征进行编码" class="headerlink" title="1、使用LabelEncoder对特征进行编码"></a>1、使用LabelEncoder对特征进行编码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span>  LabelEncoder</span><br><span class="line">lb_encoder = LabelEncoder()</span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> df.columns:</span><br><span class="line">    df.Class = lb_encoder.fit_transform(df.Class)</span><br><span class="line"><span class="built_in">print</span>(df.Class.value_counts())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、直接替换"><a href="#2、直接替换" class="headerlink" title="2、直接替换"></a>2、直接替换</h3><p>若该属性只有几类，可直接替换</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train_data.Embarked=train_data.Embarked.<span class="built_in">map</span>(&#123;<span class="string">&#x27;S&#x27;</span>:<span class="number">0</span>, <span class="string">&#x27;C&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;Q&#x27;</span>:<span class="number">2</span>&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">all_features.Sex.replace(<span class="string">&#x27;male&#x27;</span>, <span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">all_features.Sex.replace(<span class="string">&#x27;female&#x27;</span>, <span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">all_features.Embarked.replace(<span class="string">&#x27;S&#x27;</span>, <span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">all_features.Embarked.replace(<span class="string">&#x27;C&#x27;</span>, <span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">all_features.Embarked.replace(<span class="string">&#x27;Q&#x27;</span>, <span class="number">2</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、one-hot编码"><a href="#3、one-hot编码" class="headerlink" title="3、one-hot编码"></a>3、one-hot编码</h3><h2 id="四、缩放和规范化"><a href="#四、缩放和规范化" class="headerlink" title="四、缩放和规范化"></a>四、缩放和规范化</h2><p>在缩放中更改数据的范围，</p><p>而在规范化方面，更改数据分布的形状。 </p><ul><li>in <strong>scaling</strong>, you’re changing the <em>range</em> of your data, while</li><li>in <strong>normalization</strong>, you’re changing the <em>shape of the distribution</em> of your data.</li></ul><h3 id="缩放："><a href="#缩放：" class="headerlink" title="缩放："></a>缩放：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">original_goal_data = pd.DataFrame(kickstarters_2017.goal)</span><br><span class="line">scaled_goal_data = minmax_scaling(original_goal_data,columns=[<span class="string">&quot;goal&quot;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="规范化："><a href="#规范化：" class="headerlink" title="规范化："></a>规范化：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">original_pledged = pd.DataFrame(kickstarters_2017.pledged)</span><br><span class="line">index_positive_pledges = kickstarters_2017.pledged &gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line">positive_pledges_only = kickstarters_2017.pledged.loc[index_positive_pledges]</span><br><span class="line"></span><br><span class="line">normalized_values = pd.Series(stats.boxcox(positive_pledges_only)[<span class="number">0</span>], </span><br><span class="line">                              name=<span class="string">&#x27;pledged&#x27;</span>, index=positive_pledges_only.index)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="五、日期处理"><a href="#五、日期处理" class="headerlink" title="五、日期处理"></a>五、日期处理</h2><h3 id="1、将日期规范化后存入dete-parsed列中"><a href="#1、将日期规范化后存入dete-parsed列中" class="headerlink" title="1、将日期规范化后存入dete_parsed列中"></a>1、将日期规范化后存入dete_parsed列中</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">landslides[<span class="string">&#x27;date_parsed&#x27;</span>] = pd.to_datetime(landslides[<span class="string">&#x27;date&#x27;</span>], <span class="built_in">format</span>=<span class="string">&quot;%m/%d/%Y&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意！format中%Y尽量用大写</strong></p><h3 id="2、从时间属性值获取日期-月份-年份"><a href="#2、从时间属性值获取日期-月份-年份" class="headerlink" title="2、从时间属性值获取日期/月份/年份"></a>2、从时间属性值获取日期/月份/年份</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">day_of_month_earthquakes = earthquakes[<span class="string">&#x27;date_parsed&#x27;</span>].dt.day</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="六、数据统一"><a href="#六、数据统一" class="headerlink" title="六、数据统一"></a>六、数据统一</h2><p>对于同一个属性的同一个值，由于输入时空格，大小写等原因，造成不一致的问题</p><h3 id="1、提取出属性中出现的值，并使用unique-获取互不相同的值"><a href="#1、提取出属性中出现的值，并使用unique-获取互不相同的值" class="headerlink" title="1、提取出属性中出现的值，并使用unique()获取互不相同的值"></a>1、提取出属性中出现的值，并使用unique()获取互不相同的值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">countries = professors[<span class="string">&#x27;Country&#x27;</span>].unique()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、删除头尾空格，把所有大写字符转化为小写"><a href="#2、删除头尾空格，把所有大写字符转化为小写" class="headerlink" title="2、删除头尾空格，把所有大写字符转化为小写"></a>2、删除头尾空格，把所有大写字符转化为小写</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">professors[<span class="string">&#x27;Country&#x27;</span>] = professors[<span class="string">&#x27;Country&#x27;</span>].<span class="built_in">str</span>.lower()</span><br><span class="line"></span><br><span class="line">professors[<span class="string">&#x27;Country&#x27;</span>] = professors[<span class="string">&#x27;Country&#x27;</span>].<span class="built_in">str</span>.strip()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Python strip() 方法用于移除字符串头尾指定的字符（默认为空格或换行符）或字符序列。</p><p>Python lower() 方法转换字符串中所有大写字符为小写。</p><h3 id="3、模糊处理"><a href="#3、模糊处理" class="headerlink" title="3、模糊处理"></a>3、模糊处理</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">matches = fuzzywuzzy.process.extract(<span class="string">&quot;usa&quot;</span>, countries, limit=<span class="number">10</span>, scorer=fuzzywuzzy.fuzz.token_sort_ratio)</span><br><span class="line">replace_matches_in_column(df=professors, column=<span class="string">&#x27;Country&#x27;</span>, string_to_match=<span class="string">&quot;usa&quot;</span>, min_ratio=<span class="number">70</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">replace_matches_in_column</span>(<span class="params">df, column, string_to_match, min_ratio = <span class="number">47</span></span>):</span><br><span class="line">    strings = df[column].unique()</span><br><span class="line">    </span><br><span class="line">    matches = fuzzywuzzy.process.extract(string_to_match, strings, limit=<span class="number">10</span>, scorer=fuzzywuzzy.fuzz.token_sort_ratio)</span><br><span class="line"></span><br><span class="line">    close_matches = [matches[<span class="number">0</span>] <span class="keyword">for</span> matches <span class="keyword">in</span> matches <span class="keyword">if</span> matches[<span class="number">1</span>] &gt;= min_ratio]</span><br><span class="line"></span><br><span class="line">    rows_with_matches = df[column].isin(close_matches)</span><br><span class="line"></span><br><span class="line">    df.loc[rows_with_matches, column] = string_to_match</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、读取arff文件&quot;&gt;&lt;a href=&quot;#一、读取arff文件&quot; class=&quot;headerlink&quot; title=&quot;一、读取arff文件&quot;&gt;&lt;/a&gt;一、读取arff文件&lt;/h2&gt;&lt;h3 id=&quot;1、使用scipy-io中arff读取文件&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="数据处理" scheme="https://nortona.github.io/categories/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
    
    <category term="数据清洗" scheme="https://nortona.github.io/tags/%E6%95%B0%E6%8D%AE%E6%B8%85%E6%B4%97/"/>
    
    <category term="空值处理" scheme="https://nortona.github.io/tags/%E7%A9%BA%E5%80%BC%E5%A4%84%E7%90%86/"/>
    
    <category term="模糊处理" scheme="https://nortona.github.io/tags/%E6%A8%A1%E7%B3%8A%E5%A4%84%E7%90%86/"/>
    
    <category term="机器学习" scheme="https://nortona.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="arff" scheme="https://nortona.github.io/tags/arff/"/>
    
  </entry>
  
  <entry>
    <title>【数据处理】：（一）图片类</title>
    <link href="https://nortona.github.io/2022/03/12/%E3%80%90%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E3%80%91%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89%E5%9B%BE%E7%89%87%E7%B1%BB/"/>
    <id>https://nortona.github.io/2022/03/12/%E3%80%90%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E3%80%91%EF%BC%9A%EF%BC%88%E4%B8%80%EF%BC%89%E5%9B%BE%E7%89%87%E7%B1%BB/</id>
    <published>2022-03-12T06:56:32.000Z</published>
    <updated>2022-03-17T03:16:53.643Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、csv文件中包含图片地址与分类"><a href="#一、csv文件中包含图片地址与分类" class="headerlink" title="一、csv文件中包含图片地址与分类"></a>一、csv文件中包含图片地址与分类</h2><h3 id="1、先读取csv文件"><a href="#1、先读取csv文件" class="headerlink" title="1、先读取csv文件"></a>1、先读取csv文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">train_data = pd.read_csv(<span class="string">&quot;../data/classify-leaves/train.csv&quot;</span>)</span><br><span class="line">test_data = pd.read_csv(<span class="string">&quot;../data/classify-leaves/test.csv&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2、将分类取出，得到classes"><a href="#2、将分类取出，得到classes" class="headerlink" title="2、将分类取出，得到classes"></a>2、将分类取出，得到classes</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classes = <span class="built_in">sorted</span>(<span class="built_in">list</span>(<span class="built_in">set</span>(train_data[<span class="string">&#x27;label&#x27;</span>])))</span><br></pre></td></tr></table></figure><h3 id="3、把classes转成对应的数字"><a href="#3、把classes转成对应的数字" class="headerlink" title="3、把classes转成对应的数字"></a>3、把classes转成对应的数字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">classes_to_num = <span class="built_in">dict</span>(<span class="built_in">zip</span>(classes,<span class="built_in">range</span>(n_classes)))</span><br></pre></td></tr></table></figure><h3 id="4、获取train-data"><a href="#4、获取train-data" class="headerlink" title="4、获取train_data"></a>4、获取train_data</h3><h4 id="1-定义一个class"><a href="#1-定义一个class" class="headerlink" title="(1)定义一个class"></a>(1)定义一个class</h4><p>初始化，传入csv文件路径，image公共路径，处理后的长宽，transform</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,csv_path,img_path,mode,height = <span class="number">224</span>,</span></span><br><span class="line"><span class="params">             weight = <span class="number">224</span>,valid_ratio=<span class="number">0.2</span>,transform = <span class="literal">None</span></span>):</span><br><span class="line">    <span class="built_in">super</span>(LeaveDataset, self).__init__()</span><br><span class="line"></span><br><span class="line">    self.csv_path = csv_path</span><br><span class="line">    self.resize_height = height</span><br><span class="line">    self.resize_weight = weight</span><br><span class="line">    self.transform = transform</span><br><span class="line">    self.img_path = img_path</span><br><span class="line">    self.mode = mode</span><br><span class="line">    <span class="comment"># print(self.mode)</span></span><br><span class="line">    <span class="comment"># 读取 csv 文件</span></span><br><span class="line">    <span class="comment"># 利用pandas读取csv文件</span></span><br></pre></td></tr></table></figure><h4 id="2-获取data-info"><a href="#2-获取data-info" class="headerlink" title="(2)获取data_info"></a>(2)获取data_info</h4><p>使用pd.read_csv()读取数据,去除表头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.data_info = pd.read_csv(csv_path,header=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><h4 id="3-划分数据集"><a href="#3-划分数据集" class="headerlink" title="(3)划分数据集"></a>(3)<strong>划分数据集</strong></h4><p>分析获取到的csv数据</p><p>是否有验证集，若没有，则<strong>将训练集划分为训练集与验证集</strong>，通过分析结构，得到图片路径与label,</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">self.data_len = <span class="built_in">len</span>(self.data_info.index)-<span class="number">1</span></span><br><span class="line">      self.train_len = <span class="built_in">int</span>(self.data_len*(<span class="number">1</span>-valid_ratio)) </span><br><span class="line"><span class="comment"># 划分验证集val_data</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># 根据不同模式，进行处理，返回不同结果</span></span><br><span class="line">      <span class="keyword">if</span> mode == <span class="string">&#x27;train&#x27;</span>:</span><br><span class="line">          <span class="comment"># 文件第一列包含图像文件名称</span></span><br><span class="line">          self.img_arr = np.asarray(self.data_info.iloc[<span class="number">1</span>:self.train_len, <span class="number">0</span>])</span><br><span class="line">          <span class="comment"># print(self.img_arr)</span></span><br><span class="line"></span><br><span class="line">          self.label_arr = np.asarray(self.data_info.iloc[<span class="number">1</span>:self.train_len, <span class="number">1</span>])</span><br><span class="line">          <span class="comment"># print(self.label_arr)</span></span><br><span class="line">      <span class="keyword">elif</span> mode == <span class="string">&#x27;valid&#x27;</span>:</span><br><span class="line">          <span class="comment"># 文件第一列包含图像文件名称</span></span><br><span class="line">          self.img_arr = np.asarray(self.data_info.iloc[self.train_len:, <span class="number">0</span>])</span><br><span class="line">          <span class="comment"># print(self.img_arr)</span></span><br><span class="line">          self.label_arr = np.asarray(self.data_info.iloc[self.train_len:, <span class="number">1</span>])</span><br><span class="line">          <span class="comment"># print(self.label_arr)</span></span><br><span class="line">      <span class="keyword">elif</span> mode == <span class="string">&#x27;test&#x27;</span>:</span><br><span class="line">          <span class="comment"># 文件第一列包含图像文件名称</span></span><br><span class="line">          self.img_arr = np.asarray(self.data_info.iloc[<span class="number">1</span>:, <span class="number">0</span>])</span><br><span class="line">          <span class="comment"># print(self.img_arr)</span></span><br><span class="line"></span><br><span class="line">      self.real_len = <span class="built_in">len</span>(self.img_arr)</span><br><span class="line"></span><br><span class="line">      <span class="built_in">print</span>(<span class="string">&#x27;Finished reading the &#123;&#125; set of Leaves Dataset (&#123;&#125; samples found)&#x27;</span></span><br><span class="line">            .<span class="built_in">format</span>(self.mode, self.real_len))</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">      </span><br></pre></td></tr></table></figure><h4 id="4-通过图片路径，获取图片，返回图片与label"><a href="#4-通过图片路径，获取图片，返回图片与label" class="headerlink" title="(4)通过图片路径，获取图片，返回图片与label"></a>(4)通过图片路径，获取图片，返回图片与label</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, item</span>):</span><br><span class="line">      single_image_name = self.img_arr[item]</span><br><span class="line"></span><br><span class="line">      img = Image.<span class="built_in">open</span>(self.img_path+single_image_name)</span><br><span class="line"></span><br><span class="line">      img = self.transform(img)</span><br><span class="line">      <span class="keyword">if</span> self.mode == <span class="string">&#x27;test&#x27;</span>:</span><br><span class="line">          <span class="keyword">return</span> img</span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">          label = self.label_arr[item]</span><br><span class="line">          num_label = classes_to_num[label]</span><br><span class="line"></span><br><span class="line">          <span class="keyword">return</span> (img,num_label)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="keyword">return</span> self.real_len</span><br></pre></td></tr></table></figure><h3 id="5、获取test-data"><a href="#5、获取test-data" class="headerlink" title="5、获取test_data"></a>5、获取test_data</h3><p>test_data与train_data基本相同，没有label</p><h3 id="6、调用traindata、validdata、testData"><a href="#6、调用traindata、validdata、testData" class="headerlink" title="6、调用traindata、validdata、testData"></a>6、调用traindata、validdata、testData</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_dataset = LeaveDataset(csv_path=<span class="string">&quot;../data/classify-leaves/train.csv&quot;</span>,img_path=Img_PATH,mode=<span class="string">&#x27;train&#x27;</span>,transform = train_transform)</span><br><span class="line">valid_dataset = LeaveDataset(csv_path=<span class="string">&quot;../data/classify-leaves/train.csv&quot;</span>,img_path=Img_PATH,mode=<span class="string">&#x27;valid&#x27;</span>,transform = val_test_transform)</span><br><span class="line">test_dataset = LeaveDataset(csv_path=<span class="string">&quot;../data/classify-leaves/test.csv&quot;</span>,img_path=Img_PATH,mode=<span class="string">&#x27;test&#x27;</span>,transform = val_test_transform)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="7、使用DataLoader分批次加载数据"><a href="#7、使用DataLoader分批次加载数据" class="headerlink" title="7、使用DataLoader分批次加载数据"></a>7、使用DataLoader分批次加载数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">train_loader = DataLoader(train_dataset,batch_size,shuffle=<span class="literal">True</span>,num_workers=<span class="number">5</span>)</span><br><span class="line">valid_loader = DataLoader(train_dataset,batch_size,shuffle=<span class="literal">True</span>,num_workers=<span class="number">5</span>)</span><br><span class="line">test_loader = DataLoader(test_dataset,batch_size,shuffle=<span class="literal">True</span>,num_workers=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8、训练"><a href="#8、训练" class="headerlink" title="8、训练"></a>8、训练</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(num_epoch):</span><br><span class="line">net.train()</span><br><span class="line">    loss_sum = <span class="number">0</span></span><br><span class="line">loss_correct = <span class="number">0</span>    </span><br><span class="line">    <span class="keyword">for</span> i,data <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">        inputs,labels = data</span><br><span class="line">        inputs = inputs.to(device)</span><br><span class="line">        labels = labels.to(device)</span><br><span class="line">        outputs = net(inputs)</span><br><span class="line">        loss = loss_func(outputs,labels)</span><br><span class="line"></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        loss.backward()</span><br><span class="line">        optimizer.step()</span><br><span class="line"></span><br><span class="line">        _,pred = torch.<span class="built_in">max</span>(outputs.data,dim =<span class="number">1</span>)</span><br><span class="line">        correct = pred.eq(labels.data).cpu().<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line">        loss_sum += loss.item()</span><br><span class="line">        loss_correct += correct.item()</span><br><span class="line"></span><br><span class="line">        step += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;train epoch&quot;</span>, epoch + <span class="number">1</span>, <span class="string">&quot;train loss is: &quot;</span>, loss_sum * <span class="number">1.0</span> / <span class="built_in">len</span>(train_loader), <span class="string">&quot;train correct is: &quot;</span>,</span><br><span class="line">              loss_correct * <span class="number">100.0</span> / <span class="built_in">len</span>(train_loader) / batch_size)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二、若为压缩包-解压为按照分类，将图片存入分类下的文件夹中"><a href="#二、若为压缩包-解压为按照分类，将图片存入分类下的文件夹中" class="headerlink" title="二、若为压缩包,解压为按照分类，将图片存入分类下的文件夹中"></a>二、若为压缩包,解压为按照分类，将图片存入分类下的文件夹中</h2><h3 id="1、定义类别名称"><a href="#1、定义类别名称" class="headerlink" title="1、定义类别名称"></a>1、定义类别名称</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">label_name = [</span><br><span class="line">    <span class="string">&quot;airplane&quot;</span>,</span><br><span class="line">    <span class="string">&quot;automobile&quot;</span>,</span><br><span class="line">    <span class="string">&quot;bird&quot;</span>,</span><br><span class="line">    <span class="string">&quot;cat&quot;</span>,</span><br><span class="line">    <span class="string">&quot;deer&quot;</span>,</span><br><span class="line">    <span class="string">&quot;dog&quot;</span>,</span><br><span class="line">    <span class="string">&quot;frog&quot;</span>,</span><br><span class="line">    <span class="string">&quot;horse&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ship&quot;</span>,</span><br><span class="line">    <span class="string">&quot;truck&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、批量glob训练数据与测试数据压缩包"><a href="#2、批量glob训练数据与测试数据压缩包" class="headerlink" title="2、批量glob训练数据与测试数据压缩包"></a>2、批量glob训练数据与测试数据压缩包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">train_list = glob.glob(<span class="string">&quot;C:\document\python\pythonDemo\pytorchTest\data\cifar-10-python\cifar-10-batches-py\data_batch_*&quot;</span>)</span><br><span class="line">test_list = glob.glob(<span class="string">&quot;C:\document\python\pythonDemo\pytorchTest\data\cifar-10-python\cifar-10-batches-py\\test_batch*&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、定义解压后训练与测试图片路径"><a href="#3、定义解压后训练与测试图片路径" class="headerlink" title="3、定义解压后训练与测试图片路径"></a>3、定义解压后训练与测试图片路径</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">save_path = <span class="string">&quot;/pytorchTest/data/cifar-10-python/cifar-10-batches-py/test&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4、遍历训练数据压缩包"><a href="#4、遍历训练数据压缩包" class="headerlink" title="4、遍历训练数据压缩包"></a>4、遍历训练数据压缩包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> test_list:</span><br><span class="line">    </span><br><span class="line">    l_dict = unpickle(l)  <span class="comment">#使用unpickle函数解压压缩包</span></span><br><span class="line"> </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> im_idx,im_data <span class="keyword">in</span> <span class="built_in">enumerate</span>(l_dict[<span class="string">b&#x27;data&#x27;</span>]):  </span><br><span class="line">        <span class="comment"># print(im_idx)</span></span><br><span class="line">        <span class="comment"># print(im_data)</span></span><br><span class="line"></span><br><span class="line">        im_label = l_dict[<span class="string">b&#x27;labels&#x27;</span>][im_idx]</span><br><span class="line">        im_name = l_dict[<span class="string">b&#x27;filenames&#x27;</span>][im_idx]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># print(im_label,im_name)</span></span><br><span class="line"></span><br><span class="line">        im_label_name = label_name[im_label]</span><br><span class="line">        im_data = np.reshape(im_data,[<span class="number">3</span>,<span class="number">32</span>,<span class="number">32</span>])</span><br><span class="line">        im_data = np.transpose(im_data,(<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># cv2.imshow(&quot;im_data&quot;, cv2.resize(im_data, (200, 200)))</span></span><br><span class="line">        <span class="comment"># cv2.waitKey(0)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;&#123;&#125;/&#123;&#125;&quot;</span>.<span class="built_in">format</span>(save_path,im_label_name)):</span><br><span class="line">            os.mkdir(<span class="string">&quot;&#123;&#125;/&#123;&#125;&quot;</span>.<span class="built_in">format</span>(save_path,im_label_name))</span><br><span class="line"></span><br><span class="line">        cv2.imwrite(<span class="string">&quot;&#123;&#125;/&#123;&#125;/&#123;&#125;&quot;</span>.<span class="built_in">format</span>(save_path,im_label_name,im_name.decode(<span class="string">&quot;utf-8&quot;</span>)),im_data)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三、已经将图片按照图片分类存入分类下的文件夹中"><a href="#三、已经将图片按照图片分类存入分类下的文件夹中" class="headerlink" title="三、已经将图片按照图片分类存入分类下的文件夹中"></a>三、已经将图片按照图片分类存入分类下的文件夹中</h2><h3 id="1、定义分类集合，并转化为对应数字"><a href="#1、定义分类集合，并转化为对应数字" class="headerlink" title="1、定义分类集合，并转化为对应数字"></a>1、定义分类集合，并转化为对应数字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">abel_name = [<span class="string">&quot;airplane&quot;</span>, <span class="string">&quot;automobile&quot;</span>, <span class="string">&quot;bird&quot;</span>,</span><br><span class="line">              <span class="string">&quot;cat&quot;</span>, <span class="string">&quot;deer&quot;</span>, <span class="string">&quot;dog&quot;</span>,</span><br><span class="line">              <span class="string">&quot;frog&quot;</span>, <span class="string">&quot;horse&quot;</span>, <span class="string">&quot;ship&quot;</span>, <span class="string">&quot;truck&quot;</span>]</span><br><span class="line"></span><br><span class="line">label_dict = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> idx, name <span class="keyword">in</span> <span class="built_in">enumerate</span>(label_name):</span><br><span class="line">    label_dict[name] = idx</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、定义加载图片函数，Image-open"><a href="#2、定义加载图片函数，Image-open" class="headerlink" title="2、定义加载图片函数，Image.open()"></a>2、定义加载图片函数，Image.open()</h3><p>并规定以什么样的方式打开</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">default_loader</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="keyword">return</span> Image.<span class="built_in">open</span>(path).convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3、定义transformer"><a href="#3、定义transformer" class="headerlink" title="3、定义transformer"></a>3、定义transformer</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">train_transform = transforms.Compose([</span><br><span class="line">    transforms.RandomHorizontalFlip(),</span><br><span class="line">    transforms.RandomVerticalFlip(),</span><br><span class="line">    transforms.RandomRotation(<span class="number">90</span>),</span><br><span class="line">    transforms.ColorJitter(brightness=<span class="number">0.2</span>, contrast=<span class="number">0.2</span>, hue=<span class="number">0.2</span>),</span><br><span class="line">    transforms.RandomGrayscale(<span class="number">0.2</span>),</span><br><span class="line">    transforms.RandomCrop(<span class="number">28</span>),</span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">    transforms.Normalize((<span class="number">0.4914</span>, <span class="number">0.4822</span>, <span class="number">0.4465</span>),</span><br><span class="line">                         (<span class="number">0.2023</span>, <span class="number">0.1994</span>, <span class="number">0.2010</span>)),</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">test_transform = transforms.Compose([</span><br><span class="line">    transforms.CenterCrop((<span class="number">32</span>, <span class="number">32</span>)),</span><br><span class="line">    transforms.ToTensor(),</span><br><span class="line">    transforms.Normalize((<span class="number">0.4914</span>, <span class="number">0.4822</span>, <span class="number">0.4465</span>),</span><br><span class="line">                         (<span class="number">0.2023</span>, <span class="number">0.1994</span>, <span class="number">0.2010</span>)),</span><br><span class="line">])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4、继承torch-utils-data中的Datasetm-并定义自己的Dataset-Class"><a href="#4、继承torch-utils-data中的Datasetm-并定义自己的Dataset-Class" class="headerlink" title="4、继承torch.utils.data中的Datasetm,并定义自己的Dataset Class"></a>4、继承torch.utils.data中的Datasetm,并定义自己的Dataset Class</h3><h4 id="（1）首先定义-init-函数"><a href="#（1）首先定义-init-函数" class="headerlink" title="（1）首先定义__init__()函数"></a>（1）首先定义__init__()函数</h4><p>传入图片地址集合，数据增强方案transform</p><p>**根据文件夹名字为分类，可以采用split获取该图片的label,**并使用label_dict转为数字。使用append加入imgs列表中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, im_list,</span></span><br><span class="line"><span class="params">             transform=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">             loader = default_loader</span>):</span><br><span class="line">    <span class="built_in">super</span>(MyDataset, self).__init__()</span><br><span class="line">    imgs = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> im_item <span class="keyword">in</span> im_list:</span><br><span class="line">        <span class="comment">#&quot;/home/kuan/dataset/CIFAR10/TRAIN/&quot; \</span></span><br><span class="line">        <span class="comment">#&quot;airplane/aeroplane_s_000021.png&quot;</span></span><br><span class="line">        im_label_name = im_item.split(<span class="string">&quot;\\&quot;</span>)[-<span class="number">2</span>]</span><br><span class="line">        imgs.append([im_item, label_dict[im_label_name]])</span><br><span class="line"></span><br><span class="line">    self.imgs = imgs</span><br><span class="line">    self.transform = transform</span><br><span class="line">    self.loader = loader</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="（2）定义getitem-函数"><a href="#（2）定义getitem-函数" class="headerlink" title="（2）定义getitem()函数"></a>（2）定义getitem()函数</h4><p>根据保存起来的imgs,里面有图片地址，以及分类。调用default_loader打开图片，然后进行数据增强，返回增强后的图片与分类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, index</span>):</span><br><span class="line">    im_path, im_label = self.imgs[index]</span><br><span class="line">    im_data = self.loader(im_path)</span><br><span class="line">    <span class="keyword">if</span> self.transform <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        im_data = self.transform(im_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> im_data, im_label</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="（3）len-函数"><a href="#（3）len-函数" class="headerlink" title="（3）len()函数"></a>（3）len()函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(self.imgs)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5、调用上面的定义"><a href="#5、调用上面的定义" class="headerlink" title="5、调用上面的定义"></a>5、调用上面的定义</h3><h4 id="（1）使用glob获取所有图片地址"><a href="#（1）使用glob获取所有图片地址" class="headerlink" title="（1）使用glob获取所有图片地址"></a>（1）使用glob获取所有图片地址</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">im_train_list = glob.glob(<span class="string">&quot;C:\\document\\python\\pythonDemo\\pytorchTest\\data\\cifar-10-python\\cifar-10-batches-py\\train\\*\\*.png&quot;</span>)</span><br><span class="line">im_test_list = glob.glob(<span class="string">&quot;C:\\document\\python\\pythonDemo\\pytorchTest\\data\\cifar-10-python\\cifar-10-batches-py\\test\\*\\*.png&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="（2）调用Mydataset"><a href="#（2）调用Mydataset" class="headerlink" title="（2）调用Mydataset"></a>（2）调用Mydataset</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">train_dataset = MyDataset(im_train_list,transform=train_transform)</span><br><span class="line">test_dataset = MyDataset(im_test_list,transform =test_transform)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6、dataloader"><a href="#6、dataloader" class="headerlink" title="6、dataloader"></a>6、dataloader</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">train_loader = DataLoader(dataset=train_dataset,batch_size=<span class="number">128</span>,shuffle=<span class="literal">True</span>,num_workers=<span class="number">4</span>)</span><br><span class="line">test_loader = DataLoader(dataset=test_dataset,batch_size=<span class="number">128</span>,shuffle=<span class="literal">False</span>,num_workers=<span class="number">4</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="四、划分数据集"><a href="#四、划分数据集" class="headerlink" title="四、划分数据集"></a>四、划分数据集</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">将数据集划分为训练集，验证集，测试集</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="comment"># 创建保存图像的文件夹</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">makedir</span>(<span class="params">new_dir</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(new_dir):</span><br><span class="line">        os.makedirs(new_dir)</span><br><span class="line">random.seed(<span class="number">1</span>) <span class="comment"># 随机种子</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.确定原图像数据集路径</span></span><br><span class="line">dataset_dir = <span class="string">&quot;C:\document\python\pythonDemo\pytorchTest\data\Rice_Image_Dataset\Rice_Image_Dataset&quot;</span>  <span class="comment">##原始数据集路径</span></span><br><span class="line"><span class="comment"># 2.确定数据集划分后保存的路径</span></span><br><span class="line">split_dir = <span class="string">&quot;C:\document\python\pythonDemo\pytorchTest\data\Rice_Image_Dataset&quot;</span>  <span class="comment">##划分后保存路径</span></span><br><span class="line">train_dir = os.path.join(split_dir, <span class="string">&quot;train&quot;</span>)</span><br><span class="line">valid_dir = os.path.join(split_dir, <span class="string">&quot;val&quot;</span>)</span><br><span class="line">test_dir = os.path.join(split_dir, <span class="string">&quot;test&quot;</span>)</span><br><span class="line"><span class="comment"># 3.确定将数据集划分为训练集，验证集，测试集的比例</span></span><br><span class="line">train_pct = <span class="number">0.9</span></span><br><span class="line">valid_pct = <span class="number">0.1</span></span><br><span class="line">test_pct = <span class="number">0.1</span></span><br><span class="line"><span class="comment"># 4.划分</span></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(dataset_dir):</span><br><span class="line">    <span class="keyword">for</span> sub_dir <span class="keyword">in</span> dirs: <span class="comment"># 遍历0，1，2，3，4，5...9文件夹</span></span><br><span class="line">        imgs = os.listdir(os.path.join(root, sub_dir)) <span class="comment"># 展示目标文件夹下所有的文件名</span></span><br><span class="line">        imgs = <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x.endswith(<span class="string">&#x27;.jpg&#x27;</span>), imgs)) <span class="comment"># 取到所有以.png结尾的文件，如果改了图片格式，这里需要修改</span></span><br><span class="line">        random.shuffle(imgs)  <span class="comment"># 乱序图片路径</span></span><br><span class="line">        img_count = <span class="built_in">len</span>(imgs)  <span class="comment"># 计算图片数量</span></span><br><span class="line">        train_point = <span class="built_in">int</span>(img_count * train_pct)  <span class="comment"># 0:train_pct</span></span><br><span class="line">        valid_point = <span class="built_in">int</span>(img_count * (train_pct + valid_pct))  <span class="comment"># train_pct:valid_pct</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(img_count):</span><br><span class="line">            <span class="keyword">if</span> i &lt; train_point:  <span class="comment"># 保存0-train_point的图片到训练集</span></span><br><span class="line">                out_dir = os.path.join(train_dir, sub_dir)</span><br><span class="line">            <span class="keyword">elif</span> i &lt; valid_point:  <span class="comment"># 保存train_point-valid_point的图片到验证集</span></span><br><span class="line">                out_dir = os.path.join(valid_dir, sub_dir)</span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment">#  保存valid_point-结束的图片到测试集</span></span><br><span class="line">                out_dir = os.path.join(test_dir, sub_dir)</span><br><span class="line">            makedir(out_dir) <span class="comment"># 创建文件夹</span></span><br><span class="line">            target_path = os.path.join(out_dir, imgs[i]) <span class="comment"># 指定目标保存路径</span></span><br><span class="line">            src_path = os.path.join(dataset_dir, sub_dir, imgs[i])  <span class="comment">#指定目标原图像路径</span></span><br><span class="line">            shutil.copy(src_path, target_path)  <span class="comment"># 复制图片</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Class:&#123;&#125;, train:&#123;&#125;, valid:&#123;&#125;, test:&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(sub_dir, train_point, valid_point-train_point,</span><br><span class="line">                                                             img_count-valid_point))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="五、相关知识"><a href="#五、相关知识" class="headerlink" title="五、相关知识"></a>五、相关知识</h2><h3 id="1、glob"><a href="#1、glob" class="headerlink" title="1、glob"></a>1、glob</h3><p>返回所有匹配的文件路径列表。它只有一个<a href="https://so.csdn.net/so/search?q=%E5%8F%82%E6%95%B0&spm=1001.2101.3001.7020">参数</a>pathname，定义了文件路径匹配规则，这里可以是绝对路径，也可以是相对路径。下面是使用glob.glob的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取指定目录下的所有图片</span></span><br><span class="line"><span class="built_in">print</span> (glob.glob(<span class="string">r&quot;/home/qiaoyunhao/*/*.png&quot;</span>),<span class="string">&quot;\n&quot;</span>)<span class="comment">#加上r让字符串不转义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取上级目录的所有.py文件</span></span><br><span class="line"><span class="built_in">print</span> (glob.glob(<span class="string">r&#x27;../*.py&#x27;</span>)) <span class="comment">#相对路径</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、asarray"><a href="#2、asarray" class="headerlink" title="2、asarray"></a>2、asarray</h3><p>转换输入为数组 array</p><p>输入参数<br>a：类数组。输入数据，可以是转换为数组的任意形式。比如列表、元组列表、元组、元组元组、列表元组和 ndarray；</p><p>dtype：数据类型，可选。默认情况下，该参数与数据数据类型相同。</p><p>order：{‘C’,’F’}，可选。选择是行优先(C-style)或列优先(Fortran-style)存储。默认为行优先。</p><p>返回值<br>out：ndarray。‘a’ 的数组形式。如果输入已经是匹配 dtype 和 order 参数的 ndarray 形式，则不执行复制，如果输入是 ndarray 的一个子类，则返回一个基类 ndarray。</p><h3 id="3、enumerate"><a href="#3、enumerate" class="headerlink" title="3、enumerate()"></a>3、enumerate()</h3><p>enumerate() 函数用于将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、csv文件中包含图片地址与分类&quot;&gt;&lt;a href=&quot;#一、csv文件中包含图片地址与分类&quot; class=&quot;headerlink&quot; title=&quot;一、csv文件中包含图片地址与分类&quot;&gt;&lt;/a&gt;一、csv文件中包含图片地址与分类&lt;/h2&gt;&lt;h3 id=&quot;1、先读取</summary>
      
    
    
    
    <category term="数据处理" scheme="https://nortona.github.io/categories/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    
    
    <category term="数据读取" scheme="https://nortona.github.io/tags/%E6%95%B0%E6%8D%AE%E8%AF%BB%E5%8F%96/"/>
    
    <category term="数据预处理" scheme="https://nortona.github.io/tags/%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86/"/>
    
    <category term="深度学习" scheme="https://nortona.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL实验二：OpenGL绘制二维图形</title>
    <link href="https://nortona.github.io/2020/04/26/OpenGL%E5%AE%9E%E9%AA%8C%E4%BA%8C%EF%BC%9AOpenGL%E7%BB%98%E5%88%B6%E4%BA%8C%E7%BB%B4%E5%9B%BE%E5%BD%A2/"/>
    <id>https://nortona.github.io/2020/04/26/OpenGL%E5%AE%9E%E9%AA%8C%E4%BA%8C%EF%BC%9AOpenGL%E7%BB%98%E5%88%B6%E4%BA%8C%E7%BB%B4%E5%9B%BE%E5%BD%A2/</id>
    <published>2020-04-26T09:05:51.000Z</published>
    <updated>2022-03-17T03:14:18.384Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-实验目的："><a href="#1-实验目的：" class="headerlink" title="1.实验目的："></a>1.实验目的：</h2><ul><li>熟悉编程环境；</li><li>了解光栅图形显示器的特点；</li><li>了解计算机绘图的特点；</li><li>利用VC+OpenGL作为开发平台设计程序，以能够在屏幕上生成任意一个像素点为本实验的结束。</li></ul><h2 id="2-实验内容："><a href="#2-实验内容：" class="headerlink" title="2.实验内容："></a>2.实验内容：</h2><p>（1） 了解和使用VC的开发环境，理解简单的OpenGL程序结构。</p><p>（2） 掌握OpenGL提供的基本图形函数，尤其是生成点的函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;GL/glut.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">glClearColor</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line">    <span class="built_in">glClear</span>(GL_COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">glColor3f</span>(<span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>);       <span class="comment">//定义正方形的颜色</span></span><br><span class="line">    <span class="built_in">glRectf</span>(<span class="number">-0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.5f</span>, <span class="number">0.5f</span>); <span class="comment">//绘制一个正方形</span></span><br><span class="line">    <span class="built_in">glBegin</span> (GL_TRIANGLES);           <span class="comment">//绘制一个三角形</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">glColor3f</span> (<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>); <span class="built_in">glVertex2f</span> (<span class="number">0.0f</span>, <span class="number">1.0f</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">glColor3f</span> (<span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>); <span class="built_in">glVertex2f</span> (<span class="number">0.8f</span>, <span class="number">-0.5f</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">glColor3f</span> (<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>); <span class="built_in">glVertex2f</span> (<span class="number">-0.8f</span>, <span class="number">-0.5f</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">glEnd</span> ();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">glPointSize</span>(<span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">glBegin</span> (GL_POINTS);            <span class="comment">//绘制三个点</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">glColor3f</span> (<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>); <span class="built_in">glVertex2f</span> (<span class="number">-0.4f</span>, <span class="number">-0.4f</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">glColor3f</span> (<span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>); <span class="built_in">glVertex2f</span> (<span class="number">0.0f</span>, <span class="number">0.0f</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">glColor3f</span> (<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>); <span class="built_in">glVertex2f</span> (<span class="number">0.4f</span>, <span class="number">0.4f</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">glEnd</span> ();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">glFlush</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">glutInit</span>(&amp;argc, argv);</span><br><span class="line"><span class="built_in">glutInitDisplayMode</span>(GLUT_RGB | GLUT_SINGLE);</span><br><span class="line"><span class="built_in">glutInitWindowPosition</span>(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"><span class="built_in">glutInitWindowSize</span>(<span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line"><span class="built_in">glutCreateWindow</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line"><span class="built_in">glutDisplayFunc</span>(&amp;display);</span><br><span class="line"><span class="built_in">glutMainLoop</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>屏幕中间为（0.0f,0.0f）,向上为y轴正半轴，向右为x轴正半轴。<br>具体函数作用见该博客[<a href="https://blog.csdn.net/augusdi/article/details/23747991]">https://blog.csdn.net/augusdi/article/details/23747991]</a>(</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-实验目的：&quot;&gt;&lt;a href=&quot;#1-实验目的：&quot; class=&quot;headerlink&quot; title=&quot;1.实验目的：&quot;&gt;&lt;/a&gt;1.实验目的：&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;熟悉编程环境；&lt;/li&gt;
&lt;li&gt;了解光栅图形显示器的特点；&lt;/li&gt;
&lt;li&gt;了解计算</summary>
      
    
    
    
    <category term="OpenGL" scheme="https://nortona.github.io/categories/OpenGL/"/>
    
    
    <category term="OpenGL" scheme="https://nortona.github.io/tags/OpenGL/"/>
    
    <category term="可视化" scheme="https://nortona.github.io/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>OpenGL实验一：OpenGL环境配置</title>
    <link href="https://nortona.github.io/2020/04/26/OpenGL%E5%AE%9E%E9%AA%8C%E4%B8%80%EF%BC%9AOpenGL%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>https://nortona.github.io/2020/04/26/OpenGL%E5%AE%9E%E9%AA%8C%E4%B8%80%EF%BC%9AOpenGL%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
    <published>2020-04-26T08:57:02.000Z</published>
    <updated>2022-03-17T04:33:16.702Z</updated>
    
    <content type="html"><![CDATA[<p>Windows环境下的GLUT本地下载地址：<a href="http://files.cnblogs.com/opengl/glut-install.zip">http://files.cnblogs.com/opengl/glut-install.zip</a>（大小约为150k）</p><p>也可直接去官方网站下载:<a href="Windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84GLUT%E6%9C%AC%E5%9C%B0%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80%EF%BC%9Aglut-install.zhttp://www.opengl.org/resources/libraries/glut/glutdlls37beta.zip">http://www.opengl.org/resources/libraries/glut/glutdlls37beta.zip</a><br>下载解压后有五个文件<br>        <img src="/" class="lazyload" data-src="/2020/04/26/OpenGL%E5%AE%9E%E9%AA%8C%E4%B8%80%EF%BC%9AOpenGL%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/20191011130955211-1647486757671.png"  class width="20191011130955211"></p><h2 id="一、windows环境下安装GLUT"><a href="#一、windows环境下安装GLUT" class="headerlink" title="一、windows环境下安装GLUT"></a><strong>一、windows环境下安装GLUT</strong></h2><h3 id="1、VC6以及VC2019环境配置"><a href="#1、VC6以及VC2019环境配置" class="headerlink" title="1、VC6以及VC2019环境配置"></a>1、VC6以及VC2019环境配置</h3><p> 1）glut.h放到GL文件夹（VC6中一般是：C:\Program Files\Microsoft Visual Studio\VC98\Include\GL，VC2019中是：C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\GL，若没有GL文件夹，则新建GL文件，再将glut.h放到GL文件夹中）。</p><p>2）glut.lib和glut32.lib放到静态函数库所在文件夹（VC6中一般是：C:\Program Files\Microsoft Visual Studio\VC98\Lib, VC2019中是：C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\lib\x86）</p><p>3）glut.dll和glut32.dll放到操作系统目录下面的system32文件夹内。（典型的位置为：C:\Windows\System32，有些机器可能为C:\Windows\SysWOW64）</p><h3 id="2、Visual-Studio-Code环境配置"><a href="#2、Visual-Studio-Code环境配置" class="headerlink" title="2、Visual Studio Code环境配置"></a>2、Visual Studio Code环境配置</h3><p>1）首先在下载安装Visual Studio Code <a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a><br>2）配置C++环境，引用<a href="https://www.zhihu.com/question/30315894">https://www.zhihu.com/question/30315894</a>，这篇博客详细介绍了如何配置C++环境<br>3）下载64位的glut,链接: <a href="https://pan.baidu.com/s/1vo8MX2EcEikZeI8WaPc7kA">https://pan.baidu.com/s/1vo8MX2EcEikZeI8WaPc7kA</a> 提取码: zide<br>4）我们把我们刚刚下的glut.h放到include目录下，或者在include目录下创建GL文件夹，放到GL文件夹里<br>然后，我们将.dll文件放到bin目录下面，.lib文件放到lib目录下</p><img src="/" class="lazyload" data-src="/2020/04/26/OpenGL%E5%AE%9E%E9%AA%8C%E4%B8%80%EF%BC%9AOpenGL%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/2019101113422277-1647486757671.png"  class width="2019101113422277"><h2 id="二、VS2019新建项目"><a href="#二、VS2019新建项目" class="headerlink" title="二、VS2019新建项目"></a>二、VS2019新建项目</h2><h3 id="1、创建新项目"><a href="#1、创建新项目" class="headerlink" title="1、创建新项目"></a>1、创建新项目</h3><img src="/" class="lazyload" data-src="/2020/04/26/OpenGL%E5%AE%9E%E9%AA%8C%E4%B8%80%EF%BC%9AOpenGL%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/201910111348115-1647486757671.png"  class width="201910111348115"><h3 id="2、创建一个空项目"><a href="#2、创建一个空项目" class="headerlink" title="2、创建一个空项目"></a>2、创建一个空项目</h3><img src="/" class="lazyload" data-src="/2020/04/26/OpenGL%E5%AE%9E%E9%AA%8C%E4%B8%80%EF%BC%9AOpenGL%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/2019101113514444-1647486757671.png"  class width="2019101113514444">3、新建文件<img src="/" class="lazyload" data-src="/2020/04/26/OpenGL%E5%AE%9E%E9%AA%8C%E4%B8%80%EF%BC%9AOpenGL%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/20191011135429400-1647486757671.png"  class width="20191011135429400"><p><strong>注意！！！ 新建文件时一定不能如图所建，否则会报系统找不到指定文件的错误</strong></p><img src="/" class="lazyload" data-src="/2020/04/26/OpenGL%E5%AE%9E%E9%AA%8C%E4%B8%80%EF%BC%9AOpenGL%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/20191011135621777-1647486757671.png"  class width="20191011135621777"> <img src="/" class="lazyload" data-src="/2020/04/26/OpenGL%E5%AE%9E%E9%AA%8C%E4%B8%80%EF%BC%9AOpenGL%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/20191011135754938-1647486757671.png"  class width="20191011135754938"><h2 id="三-测试样例"><a href="#三-测试样例" class="headerlink" title="三.测试样例"></a>三.测试样例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;GL\glut.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;math.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n = <span class="number">3600</span>;</span><br><span class="line"><span class="type">float</span> PI = <span class="number">3.1415926f</span>;</span><br><span class="line"><span class="type">float</span> R = <span class="number">0.8f</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">myDisplay</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">glClearColor</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>);</span><br><span class="line"><span class="built_in">glClear</span>(GL_COLOR_BUFFER_BIT);</span><br><span class="line"><span class="built_in">glClearColor</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">glColor4f</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">glBegin</span>(GL_LINE_LOOP);</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> a[<span class="number">5</span>], b[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i += <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">a[i] = R * <span class="built_in">cos</span>(i / <span class="number">5.0</span> * <span class="number">2.0</span> * PI);</span><br><span class="line">b[i] = R * <span class="built_in">sin</span>(i / <span class="number">5.0</span> * <span class="number">2.0</span> * PI);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">glColor3f</span>(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">0.0f</span>); <span class="built_in">glVertex2f</span>(a[<span class="number">0</span>], b[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">glColor3f</span>(<span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">0.0f</span>); <span class="built_in">glVertex2f</span>(a[<span class="number">2</span>], b[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">glColor3f</span>(<span class="number">0.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>); <span class="built_in">glVertex2f</span>(a[<span class="number">4</span>], b[<span class="number">4</span>]);</span><br><span class="line"><span class="built_in">glColor3f</span>(<span class="number">0.0f</span>, <span class="number">1.0f</span>, <span class="number">1.0f</span>); <span class="built_in">glVertex2f</span>(a[<span class="number">1</span>], b[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">glColor3f</span>(<span class="number">1.0f</span>, <span class="number">0.0f</span>, <span class="number">1.0f</span>); <span class="built_in">glVertex2f</span>(a[<span class="number">3</span>], b[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">glEnd</span>();</span><br><span class="line"><span class="built_in">glFlush</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">glutInit</span>(&amp;argc, argv);</span><br><span class="line"><span class="built_in">glutInitDisplayMode</span>(GLUT_RGB | GLUT_SINGLE);</span><br><span class="line"><span class="built_in">glutInitWindowPosition</span>(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"><span class="built_in">glutInitWindowSize</span>(<span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line"><span class="built_in">glutCreateWindow</span>(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line"><span class="built_in">glutDisplayFunc</span>(&amp;myDisplay);</span><br><span class="line"><span class="built_in">glutMainLoop</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果</p><img src="/" class="lazyload" data-src="/2020/04/26/OpenGL%E5%AE%9E%E9%AA%8C%E4%B8%80%EF%BC%9AOpenGL%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/20191011140043532-1647486757671.png"  class width="20191011140043532">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Windows环境下的GLUT本地下载地址：&lt;a href=&quot;http://files.cnblogs.com/opengl/glut-install.zip&quot;&gt;http://files.cnblogs.com/opengl/glut-install.zip&lt;/a&gt;（大小约</summary>
      
    
    
    
    <category term="OpenGL" scheme="https://nortona.github.io/categories/OpenGL/"/>
    
    
    <category term="环境配置" scheme="https://nortona.github.io/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    <category term="OpenGL" scheme="https://nortona.github.io/tags/OpenGL/"/>
    
  </entry>
  
</feed>
